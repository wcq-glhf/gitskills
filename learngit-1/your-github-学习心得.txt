谢谢廖老师，通过你的教程，我学会了很多。
已经能够基本使用git了，你讲解的很细致，通俗易懂。


学习心得

1．创建仓库
1.	创建一个repository（翻译是仓库的意思），也就是创建一个目录，最好不要出现中文，然后进入到这个目录里面执行命令：”git init”，来初始化这个仓库
2．配置仓库信息
2创建完毕后，你需要为你设置名称，和邮箱，使用命令：
a)	Git config –global user.name ‘you name’
b)	Git config –global user.email ‘you email’
这句话的意思是，设置全局仓库的控制着名称和邮箱。 
3．添加命令
当你做好前面的基本配置后，你就可以为你的仓库添加东西了，可以使用命令：
a)	Git add “文件名称”	
需要注意的是，添加的文件只能是在你创建的仓库下才行。
4．提交命令
当你将所需要的代码添加成功后，你就可以使用命令：
a)	Git commit –m ’提示说明信息’
这句话会将你前面所添加的暂存信息，真正的添加到你的仓库里，“-m”后面是你这次提交的说明信息，强烈建议写上说明。
5．查看详细操作日志
当你需要查看仓库的详细修改信息时，你可以通过阅读日志的方式来完成。
a)	Git log   //表示查看仓库所有的更改情况
b)	当你觉得显示的信息过于杂乱，你可以给他加上参数后来显示。
a)	Git log –pretty=oneline  //只显示修改了什么，而不显示所有的详细信息。
6．时光倒退
当你需要回退到某个版时，你可以使用命令
a)	Git reset –-hard commit_id   //回退到commit_id的版本
b)	Git reset –hard HEAD^  //回退到上一个版本
a)	HEAD的具体含义是这样的：
a)	HEAD  //代表当前
b)	HEAD^ //代表上一个版本
c)	HEAD^^ //代表上上一个版本
d)	HEAD^^^//代表上上上一个本本
i.	比如当你需要回退到前100个版本时，你可以这样写，HEAD~100
7．工作区和暂存区
a)	工作区：代表你代码所在的目录就是工作区，你可以在里面任意的修改删除都不会有任何问题
b)	暂存区：当你觉得你的代码没什问题时，你就可以将踏上出拿到暂存区，就是使用“git add  ‘文件名称’ ”，这个命令时，他就是将代码上传的暂存区，当你将代码上传到暂存区后，你就可以使用git status 来查看暂存区的修改情况。
c)	版本库：就是当你使用命令“git commit –m ‘说明参数’”时，就是将所有的暂存区代码上传到版本库里面，当你将代码上传到版本库后，你再使用 git status 时，你就会发现你的工作区很干净，也就是说，上传代码到版本库后，就不会查询到暂存区的修改信息了。
d)	总结
a)	所以，git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支
b)	一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的：
8．撤销修改
a)	撤销工作区修改：当你再工作区修改了某个文件，并且保存了，但是你有想回到保存前的时候，你就可以这样：
a)	Git checkout – file
i.	你可以回到你在工作区修改前的时候，其实就是相当于用版本库里的替换掉工作区里的版本。
b)	撤销上传到暂存区：当你修改完某个文件，并且上传到了暂存区后，发现有问题并想把他从暂存区里取出时：
a)	Git reset HEAD –file
i.	你可以把他从暂存区里去除。
9．上传本地仓库到远程服务器
a)	上传内容到github:你可以将你的代码免费托管到github上，但他是公开的，意思就是说如果你想注重代码的隐私，那么你就需要付费使用，让他成为私有代码。
a)	在使用之前你需要在你的本地电脑进行一些配置：
i.	如果你的用户目录下有一个.ssh目录，那么请直接看下一步，如果没有请按照下面的操作进行。
1.	Linux打开shell，windows打开git bash，创建SSH key：
a)	ssh-keygen –t rsa –C “这里填写自己的邮箱”
b)	一路回车即可，因为也没有什么太军事化的东西，所有不需要添加密码。
c)	如果一切顺利，你可以在用户目录找到.ssh目录，里面有私钥：id_rsa和公钥：id_rsa.pub。
d)	只要保护私钥，公钥你可以放心的给别人。
ii.	登陆github，打开account settings，“ssh keys”页面：
1.	点击Add SSH Key，填上任意的名称，在key的文本框里面复制上，刚才生成在用户目录下.ssh文件里面的内容（全部复制），点击add key，然后他可能会让你验证邮箱，这时候按着提示走，就行了。
2.	SSH Key的作用是，用于检测推送到的提交确实是你提交的，而不是别人，说白了就是用于身份确认的
3.	Git hub支持多个key，当你有多个电脑时，你可以添加多个key，就行了。
b)		当你在本地已经有了一个仓库后，而你又想在github上创建一个仓库，又想让这恋歌仓库同步，这样它既可以起到备份作用，又可以让别人来共同维护这个代码。		a)	登陆github后点击右上角的+号，选择new repository，来创建一个远程仓库。 		
i.	然后输入这个仓库的名称，点击下面的create repository来完成创建
 
ii.	创建完成仓库后，你可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后把本地仓库的内容推送到github上，
iii.	现在根据提示来完成。
1.	Git remote add origin git@github.com :1194681498/Repository
a)	这里的origin是这个远程仓库的名称，冒号后面是你的github账号，再后面是你要推送到具体那个仓库	
2.	Git push –u orgin master
a)	这个命令会将本地仓库的内容推送到远程仓库，由于第一次推送master分支，所有加上了 –u参数，他不但会将本地的内容推送到远程仓库，还会为他们俩之间创建了关联，为以后推送或者拉去提供了便利。
1.上传仓库中可能出现的问题
如果输入$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git 
    提示出错信息：fatal: remote origin already exists.
    解决办法如下：
    1、先输入$ git remote rm origin 
    2、再输入$ git remote add origin git@github.com:djqiang/gitdemo.git 就不会报错了！
    3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section 'remote.origin'. 我们需要修改gitconfig文件的内容
    4、找到你的github的安装路径，我的是C:\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc
    5、找到一个名为gitconfig的文件，打开它把里面的[remote "origin"]那一行删掉就好了 

